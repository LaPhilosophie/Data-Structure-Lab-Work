#include <iostream>
#include <bits/stdc++.h>
using namespace std;
typedef int Status;
typedef struct LNode
{
    int data;
    struct LNode *next;
}LNode,*LinkList;
void Creat_Cir_List(LinkList &L,int n)
{
    L=new LNode;
    LinkList r,s;
    r=L;
    for(int i=0;i<n;i++)
    {
        s=new LNode;
        cin>>s->data;
        r->next=s;
        r=s;
    }
    r->next=L->next;//循环链表构建成功
    delete L;
}
void Output_Cir_List(LinkList L,int n)
{
    LinkList p;
    p=L->next;
    for(int i=0;i<n;i++)
    {
        cout<<p->data<<" ";
        p=p->next;
    }
    cout<<endl;
}
int Cir_Length(LinkList L)
{
    LinkList p;
    p=L->next->next;
    int j=1;
    while(p!=L->next)
    {
        p=p->next;
        j++;
    }
    return j;
}
void IsEmpty(LinkList L)
{
    if(L->next)
        cout<<"非空"<<endl;
    else
        cout<<"为空"<<endl;
}
void Output(LinkList L,int n)
{
    LinkList p;
    p=L->next;
    int j=0;
    while(p&&(j<n-1))
    {
        p=p->next;
        j++;
    }
    cout<<p->data<<endl;
}
int LocateElem(LinkList L,int n)
{
    LinkList p;
    p=L->next;
    int j=1;
    while(p&&p->data!=n)
    {
        p=p->next;
        ++j;
    }
    return j;
}
void ListInsert(LinkList &L,int i,int e)
{
    LinkList p,s;
    int j=0;
    p=L;
    while(j<i-1)
    {
        p=p->next;
        j++;
    }
    s=new LNode;
    s->data=e;
    s->next=p->next;
    p->next=s;
}
void ListDelete(LinkList &L,int i)
{
    LinkList p,s;
    int j=0;
    p=L;
    while(j<i-1)
    {
        p=p->next;
        j++;
    }
    s=p->next;
    p->next=s->next;
    delete s;
}
int main()
{
    LinkList L;

    cout<<"请输入元素"<<endl;
    Creat_Cir_List(L,5);//建立一个含有五个元素的循环链表

    cout<<"输出顺序表元素"<<endl;
    Output_Cir_List(L,Cir_Length(L));

    cout<<"顺序表长度:"<<endl;
    cout<<Cir_Length(L)<<endl;

    cout<<"判断顺序表是否为空"<<endl;
    IsEmpty(L);

    cout<<"输出第三个元素"<<endl;
    Output(L,3);

    cout<<"输出元素24的位置"<<endl;
    cout<<LocateElem(L,24)<<endl;

    cout<<"在L的第四个元素前插入元素0"<<endl;
        ListInsert(L,4,0);

    cout<<"输出顺序表元素"<<endl;
    Output_Cir_List(L,Cir_Length(L));

    cout<<"删除L的第五个元素"<<endl;
    ListDelete(L,5);

    cout<<"输出顺序表L"<<endl;
    Output_Cir_List(L,Cir_Length(L));

    return 0;
}
