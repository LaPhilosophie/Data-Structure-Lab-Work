/*
实验1 线性表相关操作（必做）
一、实验目的：掌握线性表的基本结构和操作方法，培养学生灵活使用结构解决实际问题的能力。
二、实验内容：
1.线性表的顺序存储与链表存储，实现数据插入、删除运算。
1）•编写程序实现顺序表的各种基本运算，并在此基础上设计一个主程序完成如下功能：
•（1）初始化顺序表L；
•（2）依次在L尾部插入元素-1,21,13,24,8；
•（3）输出顺序表L;
•（4）输出顺序表L长度；
•（5）判断顺序表L是否为空；
•（6）输出顺序表L的第3个元素；
•（7）输出元素24的位置；
•（8）在L的第4个元素前插入元素0；
•（9）输出顺序表L;
•（10）删除L的第5个元素；
•（11）输出顺序表L。
*/
#include <iostream>
#include<bits/stdc++.h>
#define MAXSIZE 100
#define OK 1
#define ERROR -1
int i,j,e;
using namespace std;
typedef int Status;
typedef struct
{
    int *elem;
    int length;
}SqList;
Status InitList(SqList &L)
{
    L.elem=new int[MAXSIZE];
    if(!L.elem)
        exit(OVERFLOW);
    L.length=0;
    return OK;
}
Status GetElem(SqList L,int i,int e )
{
    if(i<1||i>L.length)
        return ERROR;
    e=L.elem[i-1];
    return OK;
}
int LocateElem(SqList L,int e)
{
    for(i=0;i<L.length;i++)
        if(L.elem[i]==e)
        return i+1;
    return 0;
}
Status ListInsert(SqList &L,int i,int e)
{
    if((i<1)||(i>L.length+1))
        return ERROR;
    if(L.length==MAXSIZE)
        return ERROR;
    for(j=L.length-1;j>=i-1;j--)
        L.elem[j+1]=L.elem[j];
    L.elem[i-1]=e;
    ++L.length;
    return OK;
}
Status ListDelete(SqList &L,int i)
{
    if((i<1)||(i>L.length))
        return ERROR;
    for(j=i;j<=L.length-1;j++)
        L.elem[j-1]=L.elem[j];
    --L.length;
    return OK;
}
void OutPutOne(SqList L,int i)
{
    cout<<L.elem[i-1]<<endl;
}
void OutPutAll(SqList L)
{
    for(i=0;i<L.length;i++)
        cout<<L.elem[i]<<" ";
    cout<<endl;
}
void IsEmpty(SqList L)
{
    if(L.length==0)
        cout<<"空表"<<endl;
    else
        cout<<"非空表"<<endl;
}
int main()
{
    int n;
    SqList L;
    InitList(L);

    cout<<"请输入元素"<<endl;

    for(i=1;i<=5;i++)
    {
        cin>>n;
        ListInsert(L,i,n);
    }

    cout<<"输出顺序表元素"<<endl;
    OutPutAll(L);

    cout<<"顺序表长度:"<<endl;
    cout<<L.length<<endl;

    cout<<"判断顺序表是否为空"<<endl;
    IsEmpty(L);

    cout<<"输出第三个元素"<<endl;
    OutPutOne(L,3);

    cout<<"输出元素24的位置"<<endl;
    cout<<LocateElem(L,24)<<endl;

    cout<<"在L的第四个元素前插入元素0"<<endl;
        ListInsert(L,4,0);

    cout<<"输出顺序表元素"<<endl;
    OutPutAll(L);

    cout<<"删除L的第五个元素"<<endl;
    ListDelete(L,5);

    cout<<"输出顺序表L"<<endl;
    OutPutAll(L);

    return 0;
}
